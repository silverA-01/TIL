# Data statistical analysis in Python

## 판다스(Pandas)
데이터 처리와 분석을 위한 파이썬 라이브러리
  - `DataFrame`(column과 row로 이루어진 table 형태의 데이터 객체)을 만들어 다룰 수 있다.
    - `DataFrame`은 Numpy 배열을 기반으로 하며, 각 column은 `Series`(Pandas의 1차원의 데이터 구조)로 구성되어 있다.
  - 대용량의 데이터들을 처리하는데 매우 편리하다.
  - Data Science, 머신러닝, 통계 분석 등 다양한 분야에서 활용 

### DataFrame과 Series의 예시
```python
import pandas as pd

# Series 생성 예시
s = pd.Series([1, 3, 5, 6, 8])

# Dataframe 생성 예시
data = {'Name': ['Noah', 'Yejun', 'Eunho'],
        'Age': [22, 22, 20]}
df = pd.DataFrame(data)
```
- `Series`는 1차원 데이터 구조로 각 데이터에는 인덱스가 존재
- `DataFrame`은 2차원 데이터 구조로 row와 column으로 이루어진 표 형태를 가지며, 여러 Series를 포함

### Pandas의 특징
* **데이터 입출력** : 다양한 형식의 데이터를 읽고 쓸 수 있다. CSV, Excel, SQL, JSON 등 다양한 포맷을 지원한다.
* **데이터 시각화** : 판다스는 맷플롯립(Matplotlib)과 통합되어 데이터 시각화를 지원한다. 데이터프레임에서 간단한 플롯(plot)을 그릴 수 있다.
* **데이터 분석 기능** : 데이터에 대한 간단한 통계 정보, 상관 관계 공분산 등을 쉽게 계산할 수 있는 기능을 제공한다.

## 넘파이(Numpy)
파이썬에서 수치 계산을 수행하는 라이브러리로, **다차원 배열**과 **행렬**을 쉽게 처리할 수 있도록 지원한다.
- numpy는 파이썬의 기본 리스트보다 빠르고 메모리 사용이 효율적
- 다양한 수학 및 통계 함수를 제공하여 데이터 과학 및 수치 계산 작업을 효과적으로 수행할 수 있도록 도와주는 라이브러리


### 배열(array) 의 특징
  1. 생성될 때 데이터의 사이즈가 고정해서 정해진다.(immutable)
  2. 메모리 저장될 때, 서로 바로 옆 주소(id)에 존재한다.
  3. 데이터 타입(자료형)이 고정되어 있다.
  > 리스트(list)는 데이터 사이즈가 가변적(mutable)이고, 요소 간의 주소(id)가 무작위로 배정된다. 또한, 각 요소에 여러가지 데이터 타입이 혼용될 수 있다.

### Numpy의 특징
* **다차원 배열(Numpy Array)** : 1차원 배열 부터 다차원 배열까지 다양한 차원의 배열을 생성하고 다룰 수 있다.
  
* **효율적인 연산** : 배열을 사용하여 벡터화된 연산을 지원하므로, 반복문을 사용하지 않고도 배열 전체에 대한 연산을 효율적으로 수행할 수 있다.

* **브로드캐스팅(Broadcasting)** : 서로 다른 크기의 배열간에도 연산이 가능하도록 해주는 기능으로, 크기가 작은 배열을 자동으로 확장하여 연산이 가능하게 한다.

* **선형 대수 연산** : 행렬 곱셈, 역행렬 계산 등과 같은 선형 대수 연산을 편리하게 수행할 수 있다.

* **랜덤 함수** : 난수 생성 및 다양한 확률 분포에 기반한 난수 생성 기능을 제공한다.

* **indexing과 slicing** : 배열의 특정 요소에 접근하거나 배열을 잘라내는 작업이 간편하게 수행된다.

## Pandas에서 `csv` 파일 읽기
### CSV(comma-separated values)
표 형태의 텍스트 데이터 및 텍스트 파일
  - `,` 기준으로 column을 구분한다.
  - 각 줄은 하나의 row에 해당한다. 모든 row는 같은 갯수의 column을 가져야 한다.
    - 즉, 줄 바꿈을 기준으로 row를 구분
  - 파일 확장자 : `.csv`

* 표 데이터

|name|english_score|math_score|
|---|---|---|
|Noah|80|65|
|Yejun|85|90|
|Eunho|90|50|
* 표 데이터를 CSV 형식으로 저장하면 아래와 같다.
  - 아래 예시에서 사용할 'test.csv' 파일은 다음과 같다고 가정하자. 
```
name, english_score, math_score
Noah, 80, 65
Yejun, 85, 90
Eunho, 90, 50
```
---
### Pandas에서 `csv` 파일 읽는 방법
1. Pandas를 pd라는 이름으로 불러온다.
```python
import pandas as pd
```

2. pandas의 `read_csv` 함수를 사용하여 csv 파일을 읽어 `DataFrame`으로 변환한다.
- 함수의 필수 인자(argument)는 읽어드리는 CSV 파일의 경로 및 파일 객체를 지정
  - `../data/`는 파일이 있는 디렉토리 경로를 나타내는 것으로, 경로에 맞게 작성해주면 된다.
- `''` string 안에 넣어준다.
- `index_col` 인자가 없으면 첫 column에 column 명이 없이 각 index 값이 들어 간다.
```python
df = pd.read_csv('../test.csv')
```

3. 소괄호 안 필수 인자에 `index_col`을 추가로 할당하면 `DataFrame`의 index로 사용할 column을 지정할 수 있다.
   - `''` 안에 index column으로 사용할 column명을 넣는다.(띄어쓰기도 그대로 반영)
```python
# df : dataframe의 약자로 df 를 변수명으로 만들어줬다.
df = pd.read_csv('../test.csv', index_col='name')
```
- 3번 코드의 `df`의 데이터 타입을 확인하면 `df`가 Pandas 라이브러리에서 제공되는 `DataFrame` 타입의 객체임을 알 수 있다. 즉, class `DataFrame`의 인스턴스(instance)로 `df`를 보기 때문에, `df`도 객체로 취급한다.
```python
type(df)
```
```
pandas.core.frame.DataFrame
```
- column명을 지정해 특정 열을 추출할 수 있다.
```python
df['name']
```

### pandas의 `read_csv` 함수의 기타 인자
* header(기본값:'infer')
  - column 이름으로 사용할 row를 지정
  - 기본값 `infer`는 첫 번째 row를 column 이름으로 사용하겠다는 의미
  - `header=None`은 column 이름을 숫자로 부여
* names
  - `header=None`일 때 직접 column 이름을 지정할 수 있다.
  - `names=['<열이름1>', '<열이름2>', ...]` 와 같은 형식을 가진다.
  - 리스트의 각 문자열 요소는 해당 column 이름을 나타내며 순서대로 column 이름이 부여된다.
  - 리스트 길이는 `DataFrame`의 column 개수와 일치해야 한다. (일치하지 않을 경우 Error)
* usecols
  - 실제로 읽어들일 column들을 지정한다. 
  - `usecols=['<읽어들일 열이름1>', '<읽어들일 열이름2>', ...]`
* dtype
  - 각 column의 데이터 타입을 지정
  - 딕셔너리 형태로 keyword에 column 이름, value에 그에 대한 데이터 타입을 매핑
  - dtype={'<열이름1>': int, '<열이름2>': str, ...}
  - 특정한 column만 지정할 경우, 나머지 column은 pandas가 자동으로 유추
* skiprows
  - 처음부터 몇 번째 row를 무시하고 읽어올지 index 지정 
* na_values
  - 누락된 값을 나타내는 문자열을 지정
  - 여러 값을 지정할 수도 있다.

## DataFrame의 크기 확인
class `DataFrame`의 `shape`라는 인스턴스 변수를 참조
- 2개의 요소를 가진 `tuple`이 반환
  - 첫 번째 요소는 데이터에 대한 수 / record 수 / row 개수
  - 두 번째 요소는 변수에 대한 수 / column 개수 
    - 변수의 개수가 n(1 이상의 정수)일 때 n차원이라고 한다.
    - index를 제외한 변수에 대한 수를 보기 때문에 `index_col`로 지정된 변수는 개수에 포함되지 않는다.
```python
df.shape
```
```
(3, 2)
```
> `DataFrame`이 3개의 row와 2개의 column으로 이루어져 있다는 것을 의미
>
> `index_col='name'`으로 `name` column을 index로 지정해주었기 때문에 column의 개수에 반영되지 않는다.

## Dataframe의 특정 row 접근
- 아래 코드처럼 접근을 index로 하면 오류가 발생
```python
df[0]
```
- 특정 row에 접근하고 싶으면 `.loc` 또는 `.iloc`을 사용한다.
  - `.loc` : 레이블 기반으로 row 선택
    - 레이블(label) : row 또는 column 이름
    - `index=['행이름1', '행이름2', ...]` 으로 row에 이름을 지정해 줄 수 있다.
    - 레이블을 따로 지정해주지 않을 경우 기본 값으로 정수형 인덱스가 자동으로 부여됨
  - `.iloc` : 정수 index 기반으로 row 선택
```python
df.iloc[0]
```
> index 0 으로 라벨링된 row에 접근된다.

## 변수의 종류
- 변수의 분류는 질적 변수와 양적 변수로 나눌 수 있다.
- 다른 분류로 이산형 변수와 연속형 변수로 나눌 수 있다.
### 질적변수
특정 범주를 표현하는 변수

수치가 있어도 산술연산을 할 수 없다. 

- 선택이 필요한 변수
  > 설문조사에서 만족도를 묻는 질문에 대한 답변
  >> 1)매우 좋음 2)좋음 3) 보통 4)나쁨 5) 매우나쁨 
- 종류를 구별하기 위한 변수
  > 성별(남성, 여성), 혈액형(A, B, AB, O) 
- **2진변수** : 값이 2개뿐인 질적변수
### 양적 변수
양을 표현하는 변수

연속적인 값을 가지며 산술 연산이 가능한 변수

> ex. 시험점수, 키, 몸무게 등
- 수치 변수라고 전부 양적 변수이지는 않다.
    > ex. 데이터상 쉽게 처리하기 위해 남성은 0, 여성은 1과 같이 숫자 데이터로 표시할 때, 이 경우 0, 1은 질적 변수

### 척도 수준
질적 변수는 명의 척도와 순서 척도로 세분화 할 수 있고, 양적 변수는 간격 척도와 비례 척도로 세분화할 수 있다. 

명의 척도, 순서 척도, 간격 척도, 비례 척도 네 가지를 **척도 수준**이라고 한다.

**<질적 변수>**

1. 명의 척도 : 범주 간에 순서가 없고, 단순히 범주를 나타냄. 
   > ex.성별(남성, 여성), 혈액형(A, B, AB, O) 
   - 구별하는 것을 목적으로 두고, 변수의 동일성 여부에만 의미를 둔다.
   - 산술 연산과 비교 연산에 의미가 없다. 
        > ex. 학생번호 4와 8은 대소 관계는 의미가 없고, 합과 차를 계산해도 의미있는 결과를 얻을 수 없다. 
   
2. 순서 척도 : 범주 간에 순서가 있는 변수.
   - 순서 관계나 대소 관계에 의미가 있음
   - 순서가 있지만, 그 간격이나 차이에 정량적인 의미가 없기 때문에, 산술 연산이나 수치적인 계산에 적용될 수 없다.
   > ex. 성적순위, 설문조사의 만족도 등
   >
   > 성적 순위 8등은 4등보다 순위가 낮으므로 대소 관계에 의미가 있다. 하지만 4등과 8드으이 차이가 8등과 12등의 차이와 동일하다고 비교할 수는 없고, 4등은 8등은 2배라고 주장할 수 없다.  

**<양적 변수>**

1. 간격척도 : 측정값 간의 차이가 있으나 비율에는 의미가 없는 변수 
   - 대소 관계와 함께 그 차이에도 의미를 두는 변수
   > ex. 연도, 온도 등
   >
   > 온도 60도는 30도보다 높은 온도이기 때문에 대소 관계에 의미가 있다. 그 차이에 해당하는 수치도 의미가 있다. 하지만 60도가 30배보다 2배 높은 온도라고 할 수 없다. 
   - 절대 영점은 없음
   > 0도는 온도의 출발점이지만, 이 자체로 아무런 의미가 없다.
   
2. 비례 척도 : 측정값 간의 대소관계, 차이, 비율 모두에 의미있는 변수
   > ex. 길이, 무게 등 
   - 절대 영점 존재
   > 0은 완전한 부재나 없을 나타낸다.  

**<척도수준>**
|대분류|척도|대소관계(범주 간 순서)|차이|비율|예시|
|---|---|---|---|---|---|
|질적 변수|명의 척도|X|X|X| 학생번호, 성별, 혈액형|
|질적 변수|순서 척도|O|X|X| 성적순위, 설문조사 만족도|
|양적 변수|간격 척도|O|O|X| 온도, 연도|
|양적 변수|비례 척도|O|O|O| 길이, 무게|

### 이산형 변수
셀 수 있는 값을 취하는 변수로, 서로 인접한 숫자 사이에 값이 존재하지 않는 변수
- 변수 간에 불연속적인 값을 가지며 특정한 값만을 가진 변수
- ex. 주사위 눈(1, 2, 3, 4, 5, 6), 가족 구성원 수, 학생 수
### 연속형 변수
연속적인 값을 취할 수 있는 변수로, 어떤 두 숫자 사이에도 반드시 숫자가 존재하는 변수
- 변수 간에 무한 개의 값을 가진다.
- ex. 길이, 무게, 시간